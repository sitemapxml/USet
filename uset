#!/bin/bash

#############################################
# https://github.com/sitemapxml/USet        #
# Author: Виктор Павловић                   #
#         https://github.com/sitemapxml     #
# License: MIT                              #
# Publish date: Aug 2, 2020.                #
# Version: 2.0                              #
#############################################

# NOTE: This script is made from two repositories: https://github.com/sitemapxml/lamp and https://github.com/sitemapxml/lemp (LAMP and LEMP)
# which were put into one repository called uset_alfa (https://github.com/sitemapxml/uset_alfa), from which is this project created.
# Version 1.3.2 of LAMP script is used as beginning version of USet script, so LAMP repository is not under active development anymore, but it will
# remain public for better understanding of USet script.

# Učitaj konfiguraciju
source config.txt

# Podešavanja jezika
if [ -f "files/languages/$conf_language.txt" ]; then
  source files/languages/$conf_language.txt
else
  source files/languages/en.txt
fi
if [ -f "files/languages/welcome/$conf_language.txt" ]; then
  source files/languages/welcome/$conf_language.txt
else
  source files/languages/welcome/en.txt
fi

if [ "$conf_disable_colors" = "true" ]; then
  RED=''
  GREEN=''
  YELLOW=''
  BLACK=''
  WHITE=''
  NC=''
  BGREEN=''
  BGRAY=''
  BNC=''
else
  # Definicije boja
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  YELLOW='\033[1;33m'
  BLACK='\e[30m'
  WHITE='\e[97m'

  # Reset boja teksta
  NC='\033[0m'

  # Boja pozadine
  BGREEN='\e[42m'
  BGRAY='\e[47m'

  # Reset boje pozadine
  BNC='\e[49m'
fi

# Davanje privilegija za pokretanje ostalim skriptama
chmod +x files/mksite files/uninstall

if [ "$conf_skip_welcome_screen" = "true" ]; then
  echo
else
  # Poruka dobrodošlice!
  whiptail --title "USet" --scrolltext --msgbox "$lang_welcome" 20 65 || echo "$lang_welcome"
fi

# Unos neophodnih podataka
echo -e ${YELLOW}"$lang_enter_information"${NC}
echo

echo -e ${YELLOW}"$lang_start_step_1"${NC}
while true; do
    read -p "$lang_enter_domain_name" hostname
	hostname=${hostname:-default}
    read -p "$lang_enter_again_to_confirm" hostname2
    [ "$hostname" = "$hostname2" ] && break
    echo -e ${RED}"$lang_try_again"${NC}
done

echo -e ${YELLOW}"$lang_start_step_2"${NC}
while true; do
    read -s -p "$lang_enter_root_password" rootpass
	rootpass=${rootpass:-default}
	echo
    read -s -p "$lang_enter_again_to_confirm" rootpass2
	echo
    [ "$rootpass" = "$rootpass2" ] && break
    echo -e ${RED}"$lang_try_again"${NC}
	echo
done

echo
echo -e ${YELLOW}"$lang_start_step_3"${NC}
read -p "$lang_enter_unix_user_username" unixuser
unixuser=${unixuser:-default}

echo -e ${YELLOW}"$lang_start_step_4"${NC}
while true; do
    read -s -p "$lang_enter_unix_user_password" unixpass
	unixpass=${unixpass:-default}
	echo
    read -s -p "$lang_enter_again_to_confirm" unixpass2
	echo
    [ "$unixpass" = "$unixpass2" ] && break
    echo -e ${RED}"$lang_try_again"${NC}
	echo
done

echo
echo -e ${YELLOW}"$lang_start_step_5"${NC}
echo -e ${YELLOW}"$lang_mysql_password_set_up"${NC}
while true; do
    read -s -p "$lang_enter_mysql_root_password" mysqlrpass
	mysqlrpass=${mysqlrpass:-default}
	echo
    read -s -p "$lang_enter_again_to_confirm" mysqlrpass2
	echo
    [ "$mysqlrpass" = "$mysqlrpass2" ] && break
    echo -e ${RED}"$lang_try_again"${NC}
	echo
done

echo
echo -e ${YELLOW}"$lang_start_step_6"${NC}
echo -e ${YELLOW}"$lang_setting_up_email"${NC}
while true; do
    read -p "$lang_enter_your_email" email
    read -p "$lang_enter_again_to_confirm" email2
    [ "$email" = "$email2" ] && email=${email:-webmaster@example.com} && break
    echo -e ${RED}"$lang_try_again"${NC}
	echo
done

# Odabir http servera
echo -e ${YELLOW}"$lang_start_step_7"${NC}
echo -e ${YELLOW}"$lang_install_apache_or_nginx"${NC}
PS3="$lang_choose_one_of_the_folowing"
options=("apache" "nginx")
select web_server in "${options[@]}"
do
    case $web_server in
        "apache")
            echo -e "$lang_you_have_chosen_apache"
            break
            ;;
        "nginx")
            echo -e "$lang_you_have_chosen_nginx"
            break
            ;;
        *) echo -e "$lang_invalid_option $REPLY"
        ;;
    esac
done

# Početak instalacije
echo
echo -e ${YELLOW}"$lang_necessary_information_is_collected"${NC}
read -p "$lang_press_enter_to_continue"
echo -e "$lang_beginning"
sleep 1s

# Ažuriranje liste repozitorija, nadogradnja se preporučuje na kraju
echo -e ${YELLOW}"$lang_updating_package_lists"${NC}
sleep 1s
apt-get update

# Dodavanje main repozitorije za slučaj da nije dodata, dodavanje universe repozitorije
echo -e ${YELLOW}"$lang_adding_repositories"${NC}
add-apt-repository main

if [ "$conf_add_apt_repository_universe" = "true" ]; then
    add-apt-repository universe
fi

apt-get update

# Instalacija software-properties-common za slučaj da nije instalirano
apt-get install software-properties-common apt-transport-https -y

if [ "$web_server" = "apache" ]; then
  echo -e ${YELLOW}"$lang_installing_apache2_php"${NC}
  sleep 1s
  apt-get install apache2 php -y
  systemctl enable apache2
else
  echo -e ${YELLOW}"$lang_installing_nginx_php_fpm"${NC}
  sleep 1s
  apt-get install nginx php-fpm -y

  # Provera verzije php-a
  php_version=$( php -r 'echo phpversion();' | head -c 3 )
  fpm_version="php$php_version-fpm"

  systemctl enable nginx $fpm_version
fi

# MySQL instalacija
apt-get install mysql-server -y
systemctl enable mysql

# Instalacija php ekstenzija
echo -e ${YELLOW}"$lang_installing_php_extensions"${NC}
sleep 1s
apt-get install $conf_php_extension_list -y

# sitni pomoćni programi zip, unzip i tree
apt-get install $conf_helper_program_list -y

# Instalacija imagick - Neophodno je za Webmin pregled fotografija
if [ "$conf_install_imagemagick" = "true" ]; then
  apt-get install imagemagick -y
else
  echo -e "$lang_skipping_imagemagick"
fi

# Provera verzije php-a
php_version=$( php -r 'echo phpversion();' | head -c 3 )

# Osnovna podešavanja php-a, ServerTokens
if [ "$web_server" = "apache" ]; then
  sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' /etc/php/"$php_version"/apache2/php.ini
  sed -i 's/post_max_size = 8M/post_max_size = 280M/g' /etc/php/"$php_version"/apache2/php.ini
  sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 256M/g' /etc/php/"$php_version"/apache2/php.ini
  sed -i 's/ServerTokens OS/ServerTokens Prod/g' /etc/apache2/conf-available/security.conf
  systemctl restart apache2
else
  sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' /etc/php/"$php_version"/fpm/php.ini
  sed -i 's/post_max_size = 8M/post_max_size = 280M/g' /etc/php/"$php_version"/fpm/php.ini
  sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 256M/g' /etc/php/"$php_version"/fpm/php.ini
  sed -i 's/# server_tokens off;/server_tokens off;/g' /etc/nginx/nginx.conf
  systemctl restart nginx "$fpm_version"
fi

# Podešavanje hostname-a prema unetom domenu
hostnamectl set-hostname "$hostname"

if [ "$conf_webmin_install" = "false" ]; then
  echo -e "$lang_skipping_webmin"
else
  # Webmin instalacija
  echo -e ${YELLOW}"$lang_installing_webmin"${NC}
  sleep 1s
  echo "deb http://download.webmin.com/download/repository sarge contrib" >> /etc/apt/sources.list
  apt-key add files/resources/jcameron-key.asc
  apt-get update
  apt-get --yes install webmin
  sed -i "s/port=10000/port=$conf_webmin_port/g" /etc/webmin/miniserv.conf
  /etc/init.d/webmin restart
fi

rm -rf /var/www/html
mkdir /var/www/"$hostname"

# Apache
if [ "$web_server" = "apache" ]; then
  echo -e ${YELLOW}"$lang_configuring_apache"${NC}
  sleep 1s
  cp files/resources/apache.conf /etc/apache2/sites-available/"$hostname".conf
  sed -i "s/sn_default/$hostname/g" /etc/apache2/sites-available/"$hostname".conf
  sed -i "s/dir_default/$hostname/g" /etc/apache2/sites-available/"$hostname".conf
  a2dissite 000-default
  rm /etc/apache2/sites-available/000-default.conf
  a2ensite "$hostname"
  a2enmod rewrite
  systemctl restart apache2
else
  echo -e ${YELLOW}"$lang_configuring_nginx"${NC}
  sleep 1s
  cp files/resources/nginx.conf /etc/nginx/sites-available/"$hostname".conf
  sed -i "s/sn_default/$hostname/g" /etc/nginx/sites-available/"$hostname".conf
  sed -i "s/dir_default/$hostname/g" /etc/nginx/sites-available/"$hostname".conf
  ln /etc/nginx/sites-available/"$hostname".conf /etc/nginx/sites-enabled/"$hostname".conf
  rm /etc/nginx/sites-available/default
  rm /etc/nginx/sites-enabled/default
  systemctl restart nginx
fi

# Dodavanje UNIX korisnika
echo -e ${YELLOW}"$lang_adding_unix_user"${NC}
sleep 1s
adduser "$unixuser" --gecos "First Last,RoomNumber,WorkPhone,HomePhone" --disabled-password
echo -e "$unixuser:$unixpass" | chpasswd
echo -e "$unixuser ALL=(ALL:ALL) ALL" | EDITOR='tee -a' visudo
echo -e ${GREEN}"$lang_user_user $unixuser $lang_is_created"${NC}

# Postavljanje nove root lozinke
echo -e ${YELLOW}"$lang_setting_up_root_password"${NC}
sleep 1s
echo -e "root:$rootpass" | chpasswd
echo -e ${GREEN}"$lang_password_is_updated"${NC}

# Kreiranje direktorijuma za skladištenje lozinki
mkdir $conf_data_folder_name
chmod 0000 -R $conf_data_folder_name

# Instalacija SSL sertifikata
while true
	do
	echo -e ${YELLOW}"$lang_install_step_1"${NC}
	read -p "$lang_do_you_want_to_install_ssl $lang_yes_no_colon" ssl_install
		case $ssl_install in
		[Yy][Ee][Ss]|[Yy])

    # Preusmeravanje na https
		while true
			do
			read -p "$lang_do_you_want_to_enable_redirect_to_https $lang_yes_no" ssl_redirect
				case $ssl_redirect in
				[Yy][Ee][Ss]|[Yy])
					https_redirect="redirect"
				break
				;;
				[Nn][Oo]|[Nn])
					https_redirect="no-redirect"
			break
			;;
			*)
				echo -e ${RED}"$lang_answer_yes_no"${NC}
			;;
			esac
		done

			echo -e "$lang_installing_ssl_certificate"
			sleep 1s
			# Certbot instalacija
      if [ "$web_server" = "apache" ]; then
  			apt-get install python3-certbot-apache -y
      else
  			apt-get install python3-certbot-nginx -y
      fi

			# Instalacija Let's encrypt SSL sertifikata
			certbot --"$web_server" --non-interactive --agree-tos --domains "$hostname" --email "$email" --"$https_redirect"

      CERTFILE="/etc/letsencrypt/live/$hostname/fullchain.pem"
      KEYFILE="/etc/letsencrypt/live/$hostname/privkey.pem"
      if [ -f "$CERTFILE" ] && [ -f "$KEYFILE" ]; then
        # Podesavanje SSL-a za Webmin
        echo -e ${YELLOW}"$lang_setting_up_ssl_for_webmin"${NC}
        sed -i '/keyfile/d' /etc/webmin/miniserv.conf
        echo -e 'keyfile=''/''etc''/''letsencrypt''/''live''/'"$hostname"'/''privkey.pem' >> /etc/webmin/miniserv.conf
        echo -e 'certfile=''/''etc''/''letsencrypt''/''live''/'"$hostname"'/''fullchain.pem' >> /etc/webmin/miniserv.conf
        /etc/init.d/webmin restart

        # Putanje do instaliranih SSL sertifikata
        echo -e "$lang_ssl_certificate_data" > $conf_data_folder_name/$conf_ssl_info_file_name
        certbot certificates >> $conf_data_folder_name/$conf_ssl_info_file_name
        chmod 0000 $conf_data_folder_name/$conf_ssl_info_file_name
        echo -e ${GREEN}"$lang_ssl_installed"${NC}
      else
        echo -e ${RED}"$lang_ssl_install_error"${NC}
        ssl_error='1'
        sleep 1s
        echo '******************************************************************' >> $conf_data_folder_name/$conf_ssl_info_file_name
        echo -е "$lang_ssl_certificate_not_installed"  >> $conf_data_folder_name/$conf_ssl_info_file_name
        echo -e "$lang_check_for_errors_and_try_again" >> $conf_data_folder_name/$conf_ssl_info_file_name
        echo '******************************************************************' >> $conf_data_folder_name/$conf_ssl_info_file_name
      fi
		break
		;;
		[Nn][Oo]|[Nn])
	break
	;;
	*)
		echo -e ${RED}"$lang_answer_yes_no"${NC}
	;;
	esac
done

# Određivanje protokola
case $ssl_install in
	[Yy][Ee][Ss]|[Yy])
		https='true'
	;;
	[Nn][Oo]|[Nn])
		https='false'
	;;
esac

if [ -f "$CERTFILE" ] && [ -f "$KEYFILE" ] && [ "$https" == "true" ]; then
    protocol='https://'
    ssl_installed='true'
else
    protocol='http://'
    ssl_installed='false'
fi

url="$protocol$hostname"

# Provera verzije mysql servera
mysqld_version=$( mysqld -V | awk '{print $3}' | head -c 1 )

# Priprema neophodnih podataka za kreiranje baze podataka 
database_password=$( date +%s | sha256sum | base64 | head -c 32 )
db_name=$( echo $hostname | sed 's/\./_/g' )

# Instalacija Wordpress-a
while true
	do
	echo -e ${YELLOW}"$lang_install_step_2"${NC}
	read -p "$lang_do_you_want_to_install_wordpress $lang_yes_no_colon" wp_install
		case $wp_install in
		[Yy][Ee][Ss]|[Yy])
			# Instaliranje faljova
			wget "$conf_wp_wget_locale"
			tar -xzvf "$conf_wp_wget_filename"
			mv wordpress /var/www/"$hostname"/html
			chown www-data:www-data -R /var/www/"$hostname"/html

			# Instaliranje dodatnih php ekstenzija
			apt-get install $conf_wp_aditional_php_extensions -y

      if [ "$web_server" = "apache" ]; then
  			systemctl restart apache2
      else
  			systemctl restart nginx "$fpm_version"
      fi

			# Brisanje nepotrebnih fajlova
			rm "$conf_wp_wget_filename"

			# Kreiranje baze podataka
			echo -e "$lang_creating_database"
			sleep 1s

      if [ "$mysqld_version" -ge "8" ]; then
        mysql -u root -e "CREATE DATABASE $db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '$unixuser'@'%' IDENTIFIED BY '$database_password'; GRANT ALL PRIVILEGES ON *.* TO '$unixuser'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;"
      else
        mysql -u root -e "CREATE DATABASE $db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '$unixuser'@localhost identified by '$database_password'; GRANT ALL ON $db_name.* to '$unixuser'@localhost WITH GRANT OPTION; FLUSH PRIVILEGES;"
      fi

			echo '******************************************************************' > $conf_db_info_file_name
			echo -e "$lang_database_access_parameters" >> $conf_db_info_file_name
			echo '******************************************************************' >> $conf_db_info_file_name
			echo -e '\n\n'"$lang_database_name""$db_name""$lang_database_user""$unixuser""$lang_database_user_password"$database_password'\n' >> $conf_db_info_file_name

			# Konfigurisanje Wordpress Multisite instalacije
				while true
					do
					read -p "$lang_do_you_want_to_enable_wordpress_multisite $lang_yes_no_colon" wp_install_multisite
						case $wp_install_multisite in
						[Yy][Ee][Ss]|[Yy])
							# Instaliranje faljova
							echo -e "$lang_configuring_wp_multisite"
							sed -i "81i define( 'WP_ALLOW_MULTISITE', true );" /var/www/"$hostname"/html/wp-config-sample.php
							echo -e ${GREEN}"$lang_multisite_is_configured"${NC}
						break
						;;
					[Nn][Oo]|[Nn])
						break
						;;
						*)
							echo -e ${RED}"$lang_answer_yes_no"${NC}
						;;
					esac
				done
			echo -e ${GREEN}"$lang_wordpress_is_installed"${NC}
		break
		;;
		[Nn][Oo]|[Nn])
			# Iskopiraj index.html u webroot
			mkdir /var/www/"$hostname"/html
			cp files/resources/index.html /var/www/"$hostname"/html/index.html
			echo "<?php phpinfo(); ?>" > /var/www/"$hostname"/html/info.php
			sed -i "s/s_title/$lang_domain $hostname $lang_is_sucessfuly_configured\!/g" /var/www/"$hostname"/html/index.html
      sed -i "s/webmin_hostname/$hostname/g" /var/www/"$hostname"/html/index.html

			echo -e "$lang_index_html_phpinfo_configured"

    # Kreiranje baze podataka
		while true
			do
			read -p "$lang_do_you_want_to_create_database $lang_yes_no_colon" db_make
				case $db_make in
				[Yy][Ee][Ss]|[Yy])
          if [ "$mysqld_version" -ge "8" ]; then
            mysql -u root -e "CREATE DATABASE $db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '$unixuser'@'%' IDENTIFIED BY '$database_password'; GRANT ALL PRIVILEGES ON *.* TO '$unixuser'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;"
          else
            mysql -u root -e "CREATE DATABASE $db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '$unixuser'@localhost identified by '$database_password'; GRANT ALL ON $db_name.* to '$unixuser'@localhost WITH GRANT OPTION; FLUSH PRIVILEGES;"
          fi

          echo '******************************************************************' > $conf_db_info_file_name
    			echo -e "$lang_database_access_parameters" >> $conf_db_info_file_name
    			echo '******************************************************************' >> $conf_db_info_file_name
    			echo -e '\n\n'"$lang_database_name""$db_name""$lang_database_user""$unixuser""$lang_database_user_password"$database_password'\n' >> $conf_db_info_file_name

				break
				;;
				[Nn][Oo]|[Nn])
					echo -e "$lang_skipping_database_creation"
          sleep 1s
			break
			;;
			*)
				echo -e ${RED}"$lang_answer_yes_no"${NC}
			;;
			esac
		done

		break
		;;
	*)
		echo -e ${RED}"$lang_answer_yes_no"${NC}
	;;
	esac
done

# 6g zaštitni zid
while true
	do
	echo -e ${YELLOW}"$lang_install_step_3"${NC}
	read -p "$lang_do_you_want_to_enable_6g_firewall $lang_yes_no_colon" apache_firewall
		case $apache_firewall in
		[Yy][Ee][Ss]|[Yy])
			cp files/resources/6g.conf /etc/apache2/6g.conf
			sed -i "s/#6g //g" /etc/apache2/sites-available/"$hostname".conf
			systemctl restart apache2
			echo -e ${GREEN}"$lang_firewall_enabled"${NC}
		break
		;;
		[Nn][Oo]|[Nn])
	break
	;;
	*)
		echo -e ${RED}"$lang_answer_yes_no"${NC}
	;;
	esac
done

# UFW zaštitni zid
while true
	do
	echo -e ${YELLOW}"$lang_install_step_4"${NC}
	read -p "$lang_do_you_want_to_enable_ufw_firewall $lang_yes_no_colon" ufw_firewall
		case $ufw_firewall in
		[Yy][Ee][Ss]|[Yy])
			ufw --force enable
			ufw allow 'OpenSSH'
			ufw allow "$conf_webmin_port/tcp"

      if [ "$web_server" = "apache" ]; then
        ufw allow 'Apache Full'
      else
        ufw allow 'Nginx Full'
      fi

			ufw reload
			echo -e ${GREEN}"$lang_port_protection_enabled"${NC}
		break
		;;
		[Nn][Oo]|[Nn])
	break
	;;
	*)
		echo -e ${RED}"$lang_answer_yes_no"${NC}
	;;
	esac
done

# Kreiranje fajla sa lozinkama
while true
	do
	echo -e ${YELLOW}"$lang_install_step_5"${NC}
	read -r -p "$lang_do_you_want_to_make_password_backup $lang_yes_no_colon" backup_file
		case $backup_file in
		[Yy][Ee][Ss]|[Yy])
		while true
			do
			echo -e ${RED}"$lang_warning_this_option_is_not_secure"${NC}
			read -p "$lang_do_you_want_to_continue $lang_yes_no_colon" backup_file_confirm
				case $backup_file_confirm in
				[Yy][Ee][Ss]|[Yy])
					echo -e "$lang_copying_passwords"
					sleep 1s
					echo '*************************************************************************************' > $conf_data_folder_name/$conf_data_file_name
					echo -e "$lang_access_parameters" >> $conf_data_folder_name/$conf_data_file_name
					echo '*************************************************************************************' >> $conf_data_folder_name/$conf_data_file_name

					echo -e '\n\n'"$lang_hostname""$hostname"'\n'"$lang_root_password""$rootpass"'\n\n'"$lang_unix_user""$unixuser"'\n'"$lang_unix_user_password""$unixpass"'\n' >> $conf_data_folder_name/$conf_data_file_name
					echo -e "$lang_mysql_root_password""$mysqlrpass"'\n\n'"$lang_email""$email"'\n\n' >> $conf_data_folder_name/$conf_data_file_name

					echo '*************************************************************************************' >> $conf_data_folder_name/$conf_data_file_name
					echo -e "$lang_password_warning" >> $conf_data_folder_name/$conf_data_file_name
					echo '*************************************************************************************' >> $conf_data_folder_name/$conf_data_file_name
					chmod 0000 $conf_data_folder_name/$conf_data_file_name
					echo -e ${GREEN}"$lang_password_data_copied"${NC}
				break
				;;
				[Nn][Oo]|[Nn])
				break
				;;
			*)
				echo -e ${RED}"$lang_answer_yes_no"${NC}
			;;
			esac
		done
		break
		;;
		[Nn][Oo]|[Nn])
		break
		;;
	*)
		echo -e ${RED}"$lang_answer_yes_no"${NC}
	;;
	esac
done

# Echo poruke
echo -e ${BLACK}${BGREEN}"$lang_installation_is_done"${NC}${BNC}
echo

if [ "$ssl_error" = "1" ]; then
  echo -e "${RED}$lang_configuring_ssl_failed${NC}"
  echo -e "$lang_check_dns_settings_and_try_again"
  echo -e "${WHITE}certbot --$web_server${NC}"
fi

echo -e "$lang_website_available_at_address ${GREEN}$url${NC}"
echo -e "$lang_chosen_webserver_is ${GREEN}$web_server${NC}"

case $wp_install in
	[Yy][Ee][Ss]|[Yy])
    echo -e "$lang_to_finish_wordpress_installation_visit_your_website"
    echo -e "$lang_and_copy_messages_from_db_info_to_wordpress"
    echo -e $lang_open_file_with_command"\n"${WHITE}"nano" $conf_db_info_file_name${NC}
	;;
	[Nn][Oo]|[Nn])
		echo -e "$lang_you_can_check_if_php_working ${GREEN}$url/info.php${NC}"
	;;
esac

echo
echo -e "$lang_webmin_installed_at_address ${GREEN}$url:$conf_webmin_port${NC}"
echo -e "$lang_to_access_webmin_you_can_use_username ${GREEN}$unixuser${NC}"
echo -e "$lang_and_password_created_during_installation"
echo
echo -e "$lang_server_webroot_is"
echo -e "/var/www/${GREEN}$hostname${NC}/html"
echo

case $backup_file_confirm in
	[Yy][Ee][Ss]|[Yy])
    echo -e "$lang_to_see_installation_data_copy_following_command"
    echo -e ${WHITE}"nano" $conf_data_folder_name"/"$conf_data_file_name${NC}
    echo
	;;
	[Nn][Oo]|[Nn])
	;;
esac

case $ssl_install in
	[Yy][Ee][Ss]|[Yy])
    echo -e "$lang_following_email_will_be_used_for_receiving_ssl_warnings:\n${GREEN}$email${NC}"
    echo
	;;
	[Nn][Oo]|[Nn])
    echo -e "$lang_your_email_address_is ${GREEN}$email${NC}"
	;;
esac

# Brisanje bash i mysql istorije
cat /dev/null > ~/.bash_history && history -c
cat /dev/null > ~/.mysql_history
