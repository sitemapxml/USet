#!/bin/bash

#############################################
# https://github.com/sitemapxml/USet        #
# Author: Виктор Павловић                   #
#         https://github.com/sitemapxml     #
# License: MIT                              #
# Publish date: Aug 2, 2020.                #
# Version: 3.0.0                            #
#############################################

USET_VERSION='3.0.0'

# Load arguments
source 'libraries/args.sh'
source 'includes/arglist.inc.sh'

# Read default configuration
if [ -f 'default.conf' ]; then source 'default.conf'; else printf "Default configuration file is missing. Exiting…\n" && exit 1 ; fi

# Load definied language and if file does not exist revert to en.txt
[ -f "languages/$conf_language.txt" ] && source "languages/$conf_language.txt" || source 'languages/en.txt'
[ -f "languages/welcome/$conf_language.txt" ] && source "languages/welcome/$conf_language.txt" || source 'languages/welcome/en.txt'
[ -f "languages/help/$conf_language.txt" ] && source "languages/help/$conf_language.txt" || source 'languages/help/en.txt'

# Load functions
source 'includes/info.inc.sh'
source 'includes/functions.inc.sh'
source 'includes/input.inc.sh'
source 'includes/install.inc.sh'

case "$1" in
  -h|--help) printf "$lang_help" && exit 0 ;;
  -v|--version) printf "USet version $USET_VERSION\n" && exit 0 ;;
esac

# Turn output text coloring On or Off
[ "$conf_disable_colors" = 'yes' ] && fn_output_coloring_off || fn_output_coloring_on

# List all variables with their values
if [ -n "$conf_debug" ]; then
  case $conf_debug in
    args) fn_show_info | awk '{print $1 " " $3}' ;;
    vars) fn_show_info | awk '{print $2 " " $3}' ;;
    full) fn_show_info ;;
  esac
fi

# Load pre-install script
if [ ! "$conf_disable_preinstall" = 'yes' ]; then
  [ -f 'user/pre-install.sh' ] && source 'user/pre-install.sh'
fi

[ $UID -ne 0 ] && echo "This script must be run as root." && exit 0

# Check if system is alerady configured
[ "$conf_ignore_lockfile" = 'no' ] && fn_check_lockfile

# Show welcome screen
[ ! "$conf_skip_welcome" = 'yes' ] && whiptail --title "USet" --scrolltext --msgbox "$lang_welcome" 20 65

# Input data
[ -n "$conf_hostname" ] && printf "hostname already set to ${YELLOW}$conf_hostname${NC}, skipping user input...\n" || fn_input_hostname
[ -n "$conf_rootpass" ] && printf "rootpass already set, skipping user input...\n" || fn_input_rootpass
[ -n "$conf_unixuser" ] && printf "unixuser already set to ${YELLOW}$conf_unixuser${NC}, skipping user input...\n" || fn_input_unixuser
[ -n "$conf_unixpass" ] && printf "unixpass already set, skipping user input...\n" || fn_input_unixpass
[ -n "$conf_mysqlrpass" ] && printf "mysqlrpass already set, skipping user input...\n" || fn_input_mysqlrpass
[ -n "$conf_email" ] && printf "email already set to ${YELLOW}$conf_email${NC}, skipping user input...\n" || fn_input_email
[ -n "$conf_http_server" ] && printf "web_server already set to ${YELLOW}$conf_http_server${NC}, skipping user input...\n" || fn_input_server_type

# Main installation process
[ ! "$conf_skip_confirm" = 'yes' ] && fn_install_continue_msg

fn_update && fn_install_utilities

[ "$conf_http_server" = 'apache' ] && fn_install_apache && fn_install_php_apache
[ "$conf_http_server" = 'nginx' ] && fn_install_nginx && fn_install_php_nginx
[ "$conf_install_mysql" = 'yes' ] && fn_install_mysql
[ "$conf_install_imagemagick" = 'yes' ] && fn_install_imagick
[ "$conf_php_modify_default" = 'yes' ] && fn_php_modify_default
[ "$conf_webmin_install" = 'yes' ] && fn_install_webmin
[ "$conf_http_server" = 'apache' ] && fn_configure_apache
[ "$conf_http_server" = 'nginx' ] && fn_configure_nginx
[ "$conf_create_index" = 'yes' ] && fn_create_index
[ "$conf_create_phpinfo" = 'yes' ] && fn_create_info

# Set hostname, root password and create additional user
fn_configure_system

# Install SSL Certificate
[ "$conf_ssl_install" = 'yes' ] && fn_install_ssl

# Install Adminer, enable UFW and create password backup file
[ "$conf_install_adminer" = 'yes' ] && fn_install_adminer
[ "$conf_enable_ufw" = 'yes' ] && fn_enable_ufw
[ "$conf_create_pass_backup" = 'yes' ] && fn_create_pass_backup
[ "$conf_create_lockfile" = 'yes' ] && fn_create_lockfile

# Load post-install script
if [ ! "$conf_disable_postinstall" = 'yes' ]; then
  [ -f 'user/post-install.sh' ] && source 'user/post-install.sh'
fi

# Show post-installation message and delete history
fn_msg_completed | fn_write_log $conf_logname

# Remove bash shell history
fn_delete_history
