#!/bin/bash

#############################################
# https://github.com/sitemapxml/USet        #
# Author: Виктор Павловић                   #
#         https://github.com/sitemapxml     #
# License: MIT                              #
# Publish date: Aug 2, 2020.                #
# Version: 2.4.0                            #
#############################################

# Load configuration
source config.txt

# Load libraries
source "./libraries/args.sh"

# Read arguments
if [ "$#" = 0 ]; then
  echo "Running script in interactive mode..."
  sleep 1s
else
  source "./includes/arglist.inc.sh"
fi

# Load definied language and if file does not exist revert to en.txt
path_to_languages='./languages/'
path_to_welcome='./languages/welcome/'
if [ -f "${path_to_languages}$conf_language.txt" ]; then
  source ${path_to_languages}$conf_language.txt
else
  source ${path_to_languages}en.txt
fi
if [ -f "${path_to_welcome}$conf_language.txt" ]; then
  source ${path_to_welcome}$conf_language.txt
else
  source ${path_to_welcome}en.txt
fi

# Load functions
source "./includes/functions.inc.sh"
source "./includes/input.inc.sh"
source "./includes/install.inc.sh"

# Turn output text coloring On or Off
if [ "$conf_disable_colors" = "true" ]; then
  fn_output_coloring_off
else
  fn_output_coloring_on
fi

# Gives execute rights to uninstall script
chmod +x ./tools/uninstall

if [ "$conf_skip_welcome_screen" = "true" ]; then
  echo
else
  # Welcome screen!
  whiptail --title "USet" --scrolltext --msgbox "$lang_welcome" 20 65 || echo "$lang_welcome"
fi

# Input data
if [ -n "$hostname" ]; then
  echo "hostname already set, skipping user input..."
  echo $hostname
else
  fn_input_hostname
fi

if [ -n "$rootpass" ]; then
  echo "rootpass already set, skipping user input..."
  echo $rootpass
else
  fn_input_rootpass
fi

if [ -n "$unixuser" ]; then
  echo "unixuser already set, skipping user input..."
  echo $unixuser
else
  fn_input_unixuser
fi

if [ -n "$unixpass" ]; then
  echo "unixpass already set, skipping user input..."
  echo $unixpass
else
  fn_input_unixpass
fi

if [ -n "$mysqlrpass" ]; then
  echo "mysqlrpass already set, skipping user input..."
else
  fn_input_mysqlrpass
fi

if [ -n "$email" ]; then
  echo "email already set, skipping user input..."
  echo $email
else
  fn_input_email
fi

if [ -n "$web_server" ]; then
  echo "web_server already set, skipping user input..."
  echo $web_server
else
  fn_input_server_type
fi

# Main installation process
fn_install

# if [ -n "$ssl_install" ]; then
#   echo "SSL će sada biti instaliran..."
#
# else
#   fn_install_ssl
# fi
fn_install_ssl


# Chosen protocol
case $ssl_install in
	[Yy][Ee][Ss]|[Yy])
		https='true'
	;;
	[Nn][Oo]|[Nn])
		https='false'
	;;
esac

if [ -f "$CERTFILE" ] && [ -f "$KEYFILE" ] && [ "$https" == "true" ]; then
    protocol='https://'
    ssl_installed='true'
else
    protocol='http://'
    ssl_installed='false'
fi

url="$protocol$hostname"

# Check mysql server version
mysqld_version=$( mysqld -V | awk '{print $3}' | head -c 1 )

# Preparing database user name and password
database_password=$( date +%s | sha256sum | base64 | head -c 32 )
db_name=$( echo $hostname | sed 's/\./_/g' )

# #####################################
# This part is currently not working
# It will be fixed in the next commit
# #####################################
#
# # Creating index file
# while true
# 	do
# 	echo -e ${YELLOW}"$lang_install_step_2"${NC}
# 	read -p "$" wp_install
# 		case $install_index in
# 		[Yy][Ee][Ss]|[Yy])
# 			# Copy index.html into the webroot
# 			mkdir /var/www/"$hostname"/html
#
#       if [ "$conf_create_index_html" = "true" ]; then
#         cp ./resources/index.html /var/www/"$hostname"/html/index.html
#   			sed -i "s/s_title/$lang_domain $hostname $lang_is_sucessfuly_configured\!/g" /var/www/"$hostname"/html/index.html
#         sed -i "s/webmin_hostname/$hostname/g" /var/www/"$hostname"/html/index.html
#
#         echo -e "$lang_index_html_configured"
#       else
#         echo "$lang_skipping_creation_of_index_html"
#       fi
#
#       # Create info.php
#       if [ "$conf_create_info_php" = 'true' ]; then
#         echo "<?php phpinfo(); ?>" > /var/www/"$hostname"/html/info.php
#         echo "$lang_info_php_configured"
#       else
#         echo "$lang_skipping_creation_of_info_php"
#       fi
#
#     # Creating database
# 		while true
# 			do
# 			read -p "$lang_do_you_want_to_create_database $lang_yes_no_colon" db_make
# 				case $db_make in
# 				[Yy][Ee][Ss]|[Yy])
#           if [ "$mysqld_version" -ge "8" ]; then
#             mysql -u root -e "CREATE DATABASE $db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '$unixuser'@'%' IDENTIFIED BY '$database_password'; GRANT ALL PRIVILEGES ON *.* TO '$unixuser'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;"
#           else
#             mysql -u root -e "CREATE DATABASE $db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci; CREATE USER '$unixuser'@localhost identified by '$database_password'; GRANT ALL ON $db_name.* to '$unixuser'@localhost WITH GRANT OPTION; FLUSH PRIVILEGES;"
#           fi
#
#           fn_insert_line > $conf_db_info_file_name
#     			echo -e "$lang_database_access_parameters" >> $conf_db_info_file_name
#     			fn_insert_line >> $conf_db_info_file_name
#     			echo -e '\n\n'"$lang_database_name""$db_name""$lang_database_user""$unixuser""$lang_database_user_password"$database_password'\n' >> $conf_db_info_file_name
#
# 				break
# 				;;
# 				[Nn][Oo]|[Nn])
# 					echo -e "$lang_skipping_database_creation"
#           sleep 1s
# 			break
# 			;;
# 			*)
# 				echo -e ${RED}"$lang_answer_yes_no"${NC}
# 			;;
# 			esac
# 		done
#
# 		break
# 		;;
# 	*)
# 		echo -e ${RED}"$lang_answer_yes_no"${NC}
# 	;;
# 	esac
# done

# Installing Adminer
while true
  do
  read -p "$lang_do_you_want_to_install_adminer" install_adminer
    case $install_adminer in
    [Yy][Ee][Ss]|[Yy])

    echo "$lang_installing_adminer"
    sleep 1s
    wget "https://www.adminer.org/latest${conf_adminer_build}.php"
    cp "latest${conf_adminer_build}.php" /var/www/"$hostname"/html/adminer.php

    echo ${GREEN}"$lang_adminer_installed_successfully"${NC}

    break
    ;;
    [Nn][Oo]|[Nn])
      echo -e "$lang_skipping_adminer"
      sleep 1s
  break
  ;;
  *)
    echo -e ${RED}"$lang_answer_yes_no"${NC}
  ;;
  esac
done

if [ "$web_server" = "apache" ]; then
  # 6g firewall from perishablepress.com
  while true
  	do
  	echo -e ${YELLOW}"$lang_install_step_3"${NC}
  	read -p "$lang_do_you_want_to_enable_apache_firewall $lang_yes_no_colon" apache_firewall
  		case $apache_firewall in
  		[Yy][Ee][Ss]|[Yy])
      echo -e ${YELLOW}"$lang_choose_apache_firewall_version"${NC}
      PS3="$lang_choose_one_of_the_folowing"
      options=("6g" "7g")
      select apache_firewall_version in "${options[@]}"
      do
          case $apache_firewall_version in
              "6g")
                  echo -e "$lang_you_have_chosen_6g"
                  sleep 1s

                  cp ./resources/6g.conf /etc/apache2/6g.conf
            			sed -i "s/#6g //g" /etc/apache2/sites-available/"$hostname".conf
            			systemctl restart apache2
            			echo -e ${GREEN}"$lang_firewall_enabled"${NC}
                  break
                  ;;
              "7g")
                  echo -e "$lang_you_have_chosen_7g"
                  sleep 1s

                  cp ./resources/7g.conf /etc/apache2/7g.conf
            			sed -i "s/#7g //g" /etc/apache2/sites-available/"$hostname".conf
            			systemctl restart apache2
            			echo -e ${GREEN}"$lang_firewall_enabled"${NC}
                  break
                  ;;
              *) echo -e "$lang_invalid_option $REPLY"
              ;;
          esac
      done
  		break
  		;;
  		[Nn][Oo]|[Nn])
  	break
  	;;
  	*)
  		echo -e ${RED}"$lang_answer_yes_no"${NC}
  	;;
  	esac
  done
else
  echo
fi

# UFW firewall
while true
	do
	echo -e ${YELLOW}"$lang_install_step_4"${NC}
	read -p "$lang_do_you_want_to_enable_ufw_firewall $lang_yes_no_colon" ufw_firewall
		case $ufw_firewall in
		[Yy][Ee][Ss]|[Yy])
			ufw --force enable
			ufw allow 'OpenSSH'
			ufw allow "$conf_webmin_port/tcp"

      if [ "$web_server" = "apache" ]; then
        ufw allow 'Apache Full'
      else
        ufw allow 'Nginx Full'
      fi

			ufw reload
			echo -e ${GREEN}"$lang_port_protection_enabled"${NC}
		break
		;;
		[Nn][Oo]|[Nn])
	break
	;;
	*)
		echo -e ${RED}"$lang_answer_yes_no"${NC}
	;;
	esac
done

# Creating password backup file
while true
	do
	echo -e ${YELLOW}"$lang_install_step_5"${NC}
	read -r -p "$lang_do_you_want_to_make_password_backup $lang_yes_no_colon" backup_file
		case $backup_file in
		[Yy][Ee][Ss]|[Yy])
		while true
			do
			echo -e ${RED}"$lang_warning_this_option_is_not_secure"${NC}
			read -p "$lang_do_you_want_to_continue $lang_yes_no_colon" backup_file_confirm
				case $backup_file_confirm in
				[Yy][Ee][Ss]|[Yy])
					echo -e "$lang_copying_passwords"
					sleep 1s
					fn_insert_line > $conf_data_folder_name/$conf_data_file_name
					echo -e "$lang_access_parameters" >> $conf_data_folder_name/$conf_data_file_name
					fn_insert_line >> $conf_data_folder_name/$conf_data_file_name

					echo -e '\n\n'"$lang_hostname""$hostname"'\n'"$lang_root_password""$rootpass"'\n\n'"$lang_unix_user""$unixuser"'\n'"$lang_unix_user_password""$unixpass"'\n' >> $conf_data_folder_name/$conf_data_file_name
					echo -e "$lang_mysql_root_password""$mysqlrpass"'\n\n'"$lang_email""$email"'\n\n' >> $conf_data_folder_name/$conf_data_file_name

					fn_insert_line >> $conf_data_folder_name/$conf_data_file_name
					echo -e "$lang_password_warning" >> $conf_data_folder_name/$conf_data_file_name
					fn_insert_line >> $conf_data_folder_name/$conf_data_file_name
					echo -e ${GREEN}"$lang_password_data_copied"${NC}
				break
				;;
				[Nn][Oo]|[Nn])
				break
				;;
			*)
				echo -e ${RED}"$lang_answer_yes_no"${NC}
			;;
			esac
		done
		break
		;;
		[Nn][Oo]|[Nn])
		break
		;;
	*)
		echo -e ${RED}"$lang_answer_yes_no"${NC}
	;;
	esac
done

# Post-installation messages
echo -e ${BLACK}${BGREEN}"$lang_installation_is_done"${NC}${BNC}
echo

if [ "$ssl_error" = "1" ]; then
  echo -e "${RED}$lang_configuring_ssl_failed${NC}"
  echo -e "$lang_check_dns_settings_and_try_again"
  echo -e "${WHITE}certbot --$web_server${NC}"
fi

echo -e "$lang_website_available_at_address ${GREEN}$url${NC}"
echo -e "$lang_chosen_webserver_is ${GREEN}$web_server${NC}"
echo -e "$lang_you_can_check_if_php_working ${GREEN}$url/info.php${NC}"

echo
echo -e "$lang_webmin_installed_at_address ${GREEN}$url:$conf_webmin_port${NC}"
echo -e "$lang_to_access_webmin_you_can_use_username ${GREEN}$unixuser${NC}"
echo -e "$lang_and_password_created_during_installation"
echo
echo -e "$lang_server_webroot_is"
echo -e "/var/www/${GREEN}$hostname${NC}/html"
echo

case $backup_file_confirm in
	[Yy][Ee][Ss]|[Yy])
    echo -e "$lang_to_see_installation_data_copy_following_command"
    echo -e ${WHITE}"nano" $conf_data_folder_name"/"$conf_data_file_name${NC}
    echo
	;;
	[Nn][Oo]|[Nn])
	;;
esac

case $ssl_install in
	[Yy][Ee][Ss]|[Yy])
    echo -e "$lang_following_email_will_be_used_for_receiving_ssl_warnings:\n${GREEN}$email${NC}"
    echo
	;;
	[Nn][Oo]|[Nn])
    echo -e "$lang_your_email_address_is ${GREEN}$email${NC}"
	;;
esac

# Deleting bash and mysql history
cat /dev/null > ~/.bash_history && history -c
cat /dev/null > ~/.mysql_history
